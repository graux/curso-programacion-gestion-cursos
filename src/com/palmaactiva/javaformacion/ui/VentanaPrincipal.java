/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.palmaactiva.javaformacion.ui;

import com.palmaactiva.javaformacion.io.Actualizable;
import com.palmaactiva.javaformacion.io.Datos;
import com.palmaactiva.javaformacion.io.ExcepcionDatos;
import com.palmaactiva.javaformacion.io.ProveedorDatos;
import com.palmaactiva.javaformacion.lib.Alumno;
import com.palmaactiva.javaformacion.lib.Curso;
import com.palmaactiva.javaformacion.lib.FabricaTabulables;
import com.palmaactiva.javaformacion.lib.NoTabulableException;
import com.palmaactiva.javaformacion.lib.Persona;
import com.palmaactiva.javaformacion.lib.Profesor;
import com.palmaactiva.javaformacion.lib.Tabulable;
import java.awt.Image;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowEvent;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Fran Grau <fran@kydemy.com>
 */
public class VentanaPrincipal extends javax.swing.JFrame implements Actualizable {

    public enum Modo {
        ALUMNOS,
        PROFESORES,
        CURSOS
    }
    private Modo modoActual = Modo.ALUMNOS;
    private ProveedorDatos datosAplicacion = null;
    private Map<Integer, Tabulable> indicesTabla = null;

    /**
     * Creates new form VentanaPrincipal
     */
    public VentanaPrincipal(ProveedorDatos datosAplicacion) {
        this.datosAplicacion = datosAplicacion;
        initComponents();
        iniciarInterfaz();
    }

    private void iniciarInterfaz() {
        this.TablaDatos.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        ListSelectionModel selectionModel = TablaDatos.getSelectionModel();
        selectionModel.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent evento) {
                ListSelectionModel modeloSeleccion = (ListSelectionModel) evento.getSource();
                if (modeloSeleccion.isSelectionEmpty()) {
                    BotonEditar.setEnabled(false);
                    BotonEliminar.setEnabled(false);
                } else {
                    BotonEditar.setEnabled(true);
                    BotonEliminar.setEnabled(true);
                }
            }
        });
        this.TablaDatos.setDefaultEditor(Object.class, null);
        this.TablaDatos.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent evento) {
                JTable tabla = (JTable) evento.getSource();
                if (evento.getClickCount() == 2 && tabla.getSelectedRow() >= 0) {
                    VentanaPrincipal.this.editarFilaSeleccionada();
                }
            }

        });
        datosAplicacion.cargarDatos(this);
    }

    void añadirTabulable(Tabulable nuevaInstancia) {
        this.datosAplicacion.añadirTabulable(nuevaInstancia, this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        GrupoModos = new javax.swing.ButtonGroup();
        DialogoSeleccionArchivo = new javax.swing.JFileChooser();
        DialogoImportarExportar = new javax.swing.JFileChooser();
        BarraBotones = new javax.swing.JToolBar();
        BotonAlumnos = new javax.swing.JToggleButton();
        BotonProfesores = new javax.swing.JToggleButton();
        BotonCursos = new javax.swing.JToggleButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        BotonNuevo = new javax.swing.JButton();
        BotonEliminar = new javax.swing.JButton();
        BotonEditar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaDatos = new javax.swing.JTable();
        BarraMenu = new javax.swing.JMenuBar();
        MenuArchivo = new javax.swing.JMenu();
        MenuItemAbrir = new javax.swing.JMenuItem();
        MenuItemGuardar = new javax.swing.JMenuItem();
        MenuItemGuardarComo = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        MenuItemExportar = new javax.swing.JMenuItem();
        MenuItemImportar = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        MenuItemSalir = new javax.swing.JMenuItem();
        MenuEditar = new javax.swing.JMenu();
        MenuItemAlumnosAleatorios = new javax.swing.JMenuItem();
        MenuItemProfesoresAleatorios = new javax.swing.JMenuItem();
        MenuItemCursosAleatorios = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        MenuItemBorrar = new javax.swing.JMenuItem();

        DialogoSeleccionArchivo.setFileFilter(new FileNameExtensionFilter("Archivos JavaFormacion", Datos.EXTENSION_JAVAFORMACION));

        DialogoImportarExportar.setFileFilter(new FileNameExtensionFilter("Archivos JSON", Datos.EXTENSION_JSON, "text"));

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Java Formación");
        setMinimumSize(new java.awt.Dimension(800, 600));
        setPreferredSize(new java.awt.Dimension(800, 600));
        setSize(new java.awt.Dimension(800, 600));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        BarraBotones.setFloatable(false);
        BarraBotones.setRollover(true);

        GrupoModos.add(BotonAlumnos);
        try{
            BotonAlumnos.setIcon(new javax.swing.ImageIcon(javax.imageio.ImageIO.read(getClass().getResource("/com/palmaactiva/javaformacion/ui/icons/student.png")).getScaledInstance(48, 48, Image.SCALE_SMOOTH)));
        } catch(java.io.IOException ex){}
        BotonAlumnos.setSelected(true);
        BotonAlumnos.setToolTipText("Alumnos");
        BotonAlumnos.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        BotonAlumnos.setFocusable(false);
        BotonAlumnos.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotonAlumnos.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotonAlumnos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonAlumnosActionPerformed(evt);
            }
        });
        BarraBotones.add(BotonAlumnos);

        GrupoModos.add(BotonProfesores);
        try{
            BotonProfesores.setIcon(new javax.swing.ImageIcon(javax.imageio.ImageIO.read(getClass().getResource("/com/palmaactiva/javaformacion/ui/icons/teacher.png")).getScaledInstance(48, 48, Image.SCALE_SMOOTH)));
        }catch(java.io.IOException ex){}
        BotonProfesores.setToolTipText("Profesores");
        BotonProfesores.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        BotonProfesores.setFocusable(false);
        BotonProfesores.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotonProfesores.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotonProfesores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonProfesoresActionPerformed(evt);
            }
        });
        BarraBotones.add(BotonProfesores);

        GrupoModos.add(BotonCursos);
        try{
            BotonCursos.setIcon(new javax.swing.ImageIcon(javax.imageio.ImageIO.read(getClass().getResource("/com/palmaactiva/javaformacion/ui/icons/class.png")).getScaledInstance(48, 48, Image.SCALE_SMOOTH)));
        } catch (java.io.IOException ex){}
        BotonCursos.setToolTipText("Cursos");
        BotonCursos.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        BotonCursos.setFocusable(false);
        BotonCursos.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotonCursos.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotonCursos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonCursosActionPerformed(evt);
            }
        });
        BarraBotones.add(BotonCursos);
        BarraBotones.add(jSeparator1);

        BotonNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/palmaactiva/javaformacion/ui/icons/create.png"))); // NOI18N
        BotonNuevo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        BotonNuevo.setFocusable(false);
        BotonNuevo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotonNuevo.setToolTipText("Nuevo...");
        BotonNuevo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotonNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonNuevoActionPerformed(evt);
            }
        });
        BarraBotones.add(BotonNuevo);

        BotonEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/palmaactiva/javaformacion/ui/icons/delete.png"))); // NOI18N
        BotonEliminar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        BotonEliminar.setEnabled(false);
        BotonEliminar.setFocusable(false);
        BotonEliminar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotonEliminar.setToolTipText("Eliminar");
        BotonEliminar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonEliminarActionPerformed(evt);
            }
        });
        BarraBotones.add(BotonEliminar);

        BotonEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/palmaactiva/javaformacion/ui/icons/edit.png"))); // NOI18N
        BotonEditar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        BotonEditar.setEnabled(false);
        BotonEditar.setFocusable(false);
        BotonEditar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotonEditar.setToolTipText("Editar...");
        BotonEditar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotonEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonEditarActionPerformed(evt);
            }
        });
        BarraBotones.add(BotonEditar);

        TablaDatos.setAutoCreateRowSorter(true);
        TablaDatos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        TablaDatos.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane1.setViewportView(TablaDatos);

        MenuArchivo.setText("Archivo");

        MenuItemAbrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        MenuItemAbrir.setText("Abrir...");
        MenuItemAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemAbrirActionPerformed(evt);
            }
        });
        MenuArchivo.add(MenuItemAbrir);

        MenuItemGuardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        MenuItemGuardar.setText("Guardar");
        MenuItemGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemGuardarActionPerformed(evt);
            }
        });
        MenuArchivo.add(MenuItemGuardar);

        MenuItemGuardarComo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        MenuItemGuardarComo.setText("Guardar Como...");
        MenuItemGuardarComo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemGuardarComoActionPerformed(evt);
            }
        });
        MenuArchivo.add(MenuItemGuardarComo);
        MenuArchivo.add(jSeparator3);

        MenuItemExportar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        MenuItemExportar.setText("Exportar...");
        MenuItemExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemExportarActionPerformed(evt);
            }
        });
        MenuArchivo.add(MenuItemExportar);

        MenuItemImportar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        MenuItemImportar.setText("Importar...");
        MenuItemImportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemImportarActionPerformed(evt);
            }
        });
        MenuArchivo.add(MenuItemImportar);
        MenuArchivo.add(jSeparator2);

        MenuItemSalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        MenuItemSalir.setText("Salir");
        MenuItemSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemSalirActionPerformed(evt);
            }
        });
        MenuArchivo.add(MenuItemSalir);

        BarraMenu.add(MenuArchivo);

        MenuEditar.setText("Editar");

        MenuItemAlumnosAleatorios.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        MenuItemAlumnosAleatorios.setText("Crear 50 alumnos aleatorios");
        MenuItemAlumnosAleatorios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemAlumnosAleatoriosActionPerformed(evt);
            }
        });
        MenuEditar.add(MenuItemAlumnosAleatorios);

        MenuItemProfesoresAleatorios.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        MenuItemProfesoresAleatorios.setText("Crear 10 profesores aleatorios");
        MenuItemProfesoresAleatorios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemProfesoresAleatoriosActionPerformed(evt);
            }
        });
        MenuEditar.add(MenuItemProfesoresAleatorios);

        MenuItemCursosAleatorios.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        MenuItemCursosAleatorios.setText("Crear 10 cursos aleatorios");
        MenuItemCursosAleatorios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemCursosAleatoriosActionPerformed(evt);
            }
        });
        MenuEditar.add(MenuItemCursosAleatorios);
        MenuEditar.add(jSeparator4);

        MenuItemBorrar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        MenuItemBorrar.setText("Eliminar todos los datos");
        MenuItemBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemBorrarActionPerformed(evt);
            }
        });
        MenuEditar.add(MenuItemBorrar);

        BarraMenu.add(MenuEditar);

        setJMenuBar(BarraMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(BarraBotones, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BarraBotones, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 551, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BotonAlumnosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonAlumnosActionPerformed
        this.activarModo(Modo.ALUMNOS);
    }//GEN-LAST:event_BotonAlumnosActionPerformed

    private void BotonProfesoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonProfesoresActionPerformed
        this.activarModo(Modo.PROFESORES);
    }//GEN-LAST:event_BotonProfesoresActionPerformed

    private void BotonCursosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonCursosActionPerformed
        this.activarModo(Modo.CURSOS);
    }//GEN-LAST:event_BotonCursosActionPerformed

    private void BotonNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonNuevoActionPerformed
        if (null != this.modoActual) {
            java.lang.Class<? extends Tabulable> tipoTabulable = null;
            java.lang.Class<? extends Persona> tipoPersona = null;

            switch (this.modoActual) {
                case ALUMNOS:
                    tipoPersona = Alumno.class;
                    tipoTabulable = tipoPersona;
                    break;
                case PROFESORES:
                    tipoPersona = Profesor.class;
                    tipoTabulable = tipoPersona;
                    break;
                case CURSOS:
                    tipoTabulable = Curso.class;
                    break;
                default:
                    break;
            }
            if (tipoTabulable == Curso.class) {
                new DialogoNuevoCurso(this, true, this.datosAplicacion).setVisible(true);
            } else {
                new DialogoNuevaPersona(this, true, tipoPersona, this.datosAplicacion).setVisible(true);
            }
        }
    }//GEN-LAST:event_BotonNuevoActionPerformed

    private void MenuItemSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemSalirActionPerformed
        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_MenuItemSalirActionPerformed

    private void MenuItemGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemGuardarActionPerformed
        this.datosAplicacion.guardarDatos(this);
    }//GEN-LAST:event_MenuItemGuardarActionPerformed

    private void BotonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonEliminarActionPerformed
        Tabulable elemento = getSelectedElement();
        this.datosAplicacion.eliminarTabulable(elemento, this);
    }//GEN-LAST:event_BotonEliminarActionPerformed

    private void MenuItemAlumnosAleatoriosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemAlumnosAleatoriosActionPerformed
        try {
            for (int indice = 0; indice < 50; indice++) {
                this.datosAplicacion.añadirTabulable(FabricaTabulables.getInstance(this.datosAplicacion).generarAlumno(), null);
            }
        } catch (NoTabulableException nte) {
            JOptionPane.showMessageDialog(this, nte.getMessage(), "ERROR Ejecutando Tarea", JOptionPane.ERROR_MESSAGE);
        } finally {
            this.actualizarDatos();
        }
    }//GEN-LAST:event_MenuItemAlumnosAleatoriosActionPerformed

    private void MenuItemProfesoresAleatoriosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemProfesoresAleatoriosActionPerformed
        try {
            for (int indice = 0; indice < 10; indice++) {
                this.datosAplicacion.añadirTabulable(FabricaTabulables.getInstance(this.datosAplicacion).generarProfesor(), null);
            }
        } catch (NoTabulableException nte) {
            JOptionPane.showMessageDialog(this, nte.getMessage(), "ERROR Ejecutando Tarea", JOptionPane.ERROR_MESSAGE);
        } finally {
            this.actualizarDatos();
        }
    }//GEN-LAST:event_MenuItemProfesoresAleatoriosActionPerformed

    private void MenuItemCursosAleatoriosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemCursosAleatoriosActionPerformed
        for (int indice = 0; indice < 10; indice++) {
            this.datosAplicacion.añadirTabulable(FabricaTabulables.getInstance(this.datosAplicacion).generarCurso(), null);
        }
        this.actualizarDatos();
    }//GEN-LAST:event_MenuItemCursosAleatoriosActionPerformed

    private void MenuItemExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemExportarActionPerformed
        int valorRetorno = this.DialogoImportarExportar.showSaveDialog(this);
        if (valorRetorno == JFileChooser.APPROVE_OPTION) {
            String archivoSeleccionado = this.DialogoImportarExportar.getSelectedFile().getAbsolutePath();
            archivoSeleccionado = this.comprobarExtensionArchivo(archivoSeleccionado, Datos.EXTENSION_JSON);
            this.datosAplicacion.exportarDatos(this, archivoSeleccionado);
        }
    }//GEN-LAST:event_MenuItemExportarActionPerformed

    private void MenuItemImportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemImportarActionPerformed
        int valorRetorno = this.DialogoImportarExportar.showOpenDialog(this);
        if (valorRetorno == JFileChooser.APPROVE_OPTION) {
            String archivoSeleccionado = this.DialogoImportarExportar.getSelectedFile().getAbsolutePath();
            this.datosAplicacion.importarDatos(this, archivoSeleccionado);
        }
    }//GEN-LAST:event_MenuItemImportarActionPerformed

    private void BotonEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonEditarActionPerformed
        this.editarFilaSeleccionada();
    }//GEN-LAST:event_BotonEditarActionPerformed

    private void MenuItemGuardarComoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemGuardarComoActionPerformed
        int valorRetorno = this.DialogoSeleccionArchivo.showSaveDialog(this);
        if (valorRetorno == JFileChooser.APPROVE_OPTION) {
            String archivoSeleccionado = this.DialogoSeleccionArchivo.getSelectedFile().getAbsolutePath();
            archivoSeleccionado = this.comprobarExtensionArchivo(archivoSeleccionado, Datos.EXTENSION_JAVAFORMACION);
            this.datosAplicacion.guardarDatos(this, archivoSeleccionado);
        }
    }//GEN-LAST:event_MenuItemGuardarComoActionPerformed

    private void MenuItemAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemAbrirActionPerformed
        int valorRetorno = this.DialogoSeleccionArchivo.showOpenDialog(this);
        if (valorRetorno == JFileChooser.APPROVE_OPTION) {
            String archivoSeleccionado = this.DialogoSeleccionArchivo.getSelectedFile().getAbsolutePath();
            this.datosAplicacion.cargarDatos(this, archivoSeleccionado);
        }
    }//GEN-LAST:event_MenuItemAbrirActionPerformed

    private void MenuItemBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemBorrarActionPerformed
        this.datosAplicacion.borrarDatos(this);
    }//GEN-LAST:event_MenuItemBorrarActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (!this.datosAplicacion.isDatosGuardados()) {
            int opcionSeleccionada = JOptionPane.showConfirmDialog(this, "Existen datos sin guardar, ¿desea descartar los cambios y salir sin guardar?", "Advertencia: Datos sin guardar", JOptionPane.YES_NO_OPTION);
            if (opcionSeleccionada == JOptionPane.YES_OPTION) {
                System.exit(0);
            }
        } else {
            System.exit(0);
        }
    }//GEN-LAST:event_formWindowClosing

    private String comprobarExtensionArchivo(String archivoSeleccionado, String extension) {
        if (!archivoSeleccionado.endsWith(extension)) {
            if (archivoSeleccionado.contains(".")) {
                archivoSeleccionado = archivoSeleccionado.substring(0, archivoSeleccionado.lastIndexOf(".")) + "." + extension;
            } else {
                archivoSeleccionado += "." + extension;
            }
        }
        return archivoSeleccionado;
    }

    private void editarFilaSeleccionada() {
        Tabulable seleccionado = this.getSelectedElement();
        if (seleccionado instanceof Persona) {
            new DialogoNuevaPersona(this, true, (Persona) seleccionado, this.datosAplicacion).setVisible(true);
        } else {
            new DialogoNuevoCurso(this, true, (Curso) seleccionado, this.datosAplicacion).setVisible(rootPaneCheckingEnabled);
        }
    }

    private void desselctionarBotones() {
        this.BotonAlumnos.setSelected(false);
        this.BotonProfesores.setSelected(false);
        this.BotonCursos.setSelected(false);
    }

    public void activarModo(Modo nuevoModo) {
        if (this.modoActual != nuevoModo) {
            this.desselctionarBotones();
            this.modoActual = nuevoModo;
            this.actualizarDatos();
        }
    }

    private Tabulable getSelectedElement() {
        int indiceSeleccionado = this.TablaDatos.getSelectedRow();
        int indiceModelo = this.TablaDatos.convertRowIndexToModel(indiceSeleccionado);
        return this.indicesTabla.get(indiceModelo);
    }

    @Override
    public void tareaCompletada(Acción accion) {
        String mensaje = null;
        switch (accion) {
            case EXPORTAR:
                mensaje = "Datos exportados con éxito.";
                break;
            case IMPORTAR:
                mensaje = "Datos importados correctamente.";
                break;
        }
        if (mensaje != null) {
            JOptionPane.showMessageDialog(this, mensaje, "Tarea Completada", JOptionPane.INFORMATION_MESSAGE);
        }
        this.actualizarDatos();
    }

    @Override
    public void actualizarDatos() {
        Collection<? extends Tabulable> elementos = null;
        String[] columnas = new String[]{};
        int[] anchoColumnas = new int[]{};
        switch (this.modoActual) {
            case ALUMNOS:
                columnas = Alumno.getColumnas();
                anchoColumnas = Alumno.getAnchoColumnas();
                elementos = this.datosAplicacion.getAlumnos();
                break;
            case PROFESORES:
                columnas = Profesor.getColumnas();
                anchoColumnas = Profesor.getAnchoColumnas();
                elementos = this.datosAplicacion.getDocentes();
                break;
            case CURSOS:
                columnas = Curso.getColumnas();
                anchoColumnas = Curso.getAnchoColumnas();
                elementos = this.datosAplicacion.getCursos();
                break;
        }

        DefaultTableModel modeloDatos = new DefaultTableModel(columnas, 0);
        this.indicesTabla = new HashMap<>(elementos.size());
        int indice = 0;
        for (Tabulable elemento : elementos) {
            modeloDatos.addRow(elemento.getValores());
            this.indicesTabla.put(indice, elemento);
            indice++;
        }

        this.TablaDatos.setModel(modeloDatos);
        if (anchoColumnas != null && anchoColumnas.length > 0) {
            indice = 0;
            TableColumnModel tcm = this.TablaDatos.getColumnModel();
            for (int anchoCol : anchoColumnas) {
                tcm.getColumn(indice).setPreferredWidth(anchoCol);
                if (indice < anchoColumnas.length - 2) {
                    tcm.getColumn(indice).setMaxWidth(anchoCol);
                }
                indice++;
            }
        }
        this.TablaDatos.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
    }

    @Override
    public void errorTarea(ExcepcionDatos ex) {
        String mensajeError = null;
        switch (ex.getAccionError()) {
            case ABRIR:
                mensajeError = "No se pudo abrir el archivo.";
                break;
            case GUARDAR:
                mensajeError = "No se han podido guardar los datos.";
                break;
            case GUARDAR_COMO:
                mensajeError = "No se pudo guardar el archivo.";
                break;
            case EXPORTAR:
                mensajeError = "No se han podido exportar los datos.";
                break;
            case IMPORTAR:
                mensajeError = "No se han podido importar los datos.";
                break;
        }
        mensajeError = "<html>" + mensajeError + "<br/>" + ex.getExcepcionOriginal().getLocalizedMessage() + "</html>";
        JOptionPane.showMessageDialog(this, mensajeError, "ERROR Ejecutando Tarea", JOptionPane.ERROR_MESSAGE);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToolBar BarraBotones;
    private javax.swing.JMenuBar BarraMenu;
    private javax.swing.JToggleButton BotonAlumnos;
    private javax.swing.JToggleButton BotonCursos;
    private javax.swing.JButton BotonEditar;
    private javax.swing.JButton BotonEliminar;
    private javax.swing.JButton BotonNuevo;
    private javax.swing.JToggleButton BotonProfesores;
    private javax.swing.JFileChooser DialogoImportarExportar;
    private javax.swing.JFileChooser DialogoSeleccionArchivo;
    private javax.swing.ButtonGroup GrupoModos;
    private javax.swing.JMenu MenuArchivo;
    private javax.swing.JMenu MenuEditar;
    private javax.swing.JMenuItem MenuItemAbrir;
    private javax.swing.JMenuItem MenuItemAlumnosAleatorios;
    private javax.swing.JMenuItem MenuItemBorrar;
    private javax.swing.JMenuItem MenuItemCursosAleatorios;
    private javax.swing.JMenuItem MenuItemExportar;
    private javax.swing.JMenuItem MenuItemGuardar;
    private javax.swing.JMenuItem MenuItemGuardarComo;
    private javax.swing.JMenuItem MenuItemImportar;
    private javax.swing.JMenuItem MenuItemProfesoresAleatorios;
    private javax.swing.JMenuItem MenuItemSalir;
    private javax.swing.JTable TablaDatos;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    // End of variables declaration//GEN-END:variables
}
